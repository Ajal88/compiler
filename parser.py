from scanner import sendNextToken

file = open('grammar.txt', 'r')
rules = file.readlines()
ter = ['EOF', 'public', 'class', '{', 'static', 'void', 'main', '}', 'extends', ';', '(', ')',
       'return', ',', 'boolean', 'int', 'if', 'else', 'while', 'for', '=', '+', 'System.out.println', '*',
       'true', 'false', '&&', 'identifier', 'integer', '-', '.', '==', '<', '$']
non_ter = []
i = 0
for rule in rules:
    rule = rule.rstrip()
    sp = rule.split(' ')
    for s in sp:
        if s == '->':
            break
        if s not in non_ter:
            non_ter.append(s)
# parse table
ll1 = {
    'Goal': {'EOF': 'Goal -> Source EOF', 'public': 'Goal -> Source EOF', 'class': 'Goal -> Source EOF', '{': '-1',
             'static': '-1', 'void': '-1', 'main': '-1', '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1',
             '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
             'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1',
             'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1',
             '==': 'Goal -> Source EOF', },
    'Source': {'EOF': 'Source -> ClassDeclarations MainClass', 'public': 'Source -> ClassDeclarations MainClass',
               'class': 'Source -> ClassDeclarations MainClass', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
               '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1',
               ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1',
               '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1',
               'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'MainClass': {'EOF': '-1',
                  'public': 'MainClass -> public class Identifier { public static void main ( ) { VarDeclarations Statements } }',
                  'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1', '}}': '-1',
                  '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1', ',': '-1',
                  'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1',
                  '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1',
                  'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'ClassDeclarations': {'EOF': '-1', 'public': 'ClassDeclarations -> ''',
                          'class': 'ClassDeclarations -> ClassDeclaration ClassDeclarations', '{': '-1', 'static': '-1',
                          'void': '-1', 'main': '-1', '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1',
                          '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                          'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                          '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                          '-': '-1', '.': '-1', '==': '-1', },
    'ClassDeclaration': {'EOF': '-1', 'public': '-1',
                         'class': 'ClassDeclaration -> class Identifier Extension { FieldDeclarations MethodDeclarations }',
                         '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1', '}}': '-1', '}': '-1',
                         'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1',
                         'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1',
                         'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1',
                         'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Extension': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': 'Extension -> ''', 'static': '-1', 'void': '-1',
                  'main': '-1', '()': '-1', '}}': '-1', '}': '-1', 'extends': 'Extension -> extends Identifier',
                  ';': '-1', '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                  'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1',
                  'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1',
                  '==': '-1', },
    'FieldDeclarations': {'EOF': '-1', 'public': 'FieldDeclarations -> ''', 'class': 'FieldDeclarations -> ''',
                          '{': '-1', 'static': 'FieldDeclarations -> FieldDeclaration FieldDeclarations', 'void': '-1',
                          'main': '-1', '()': '-1', '}}': '-1', '}': 'FieldDeclarations -> ''', 'extends': '-1',
                          ';': '-1', '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1',
                          'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1',
                          'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1',
                          'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'FieldDeclaration': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1',
                         'static': 'FieldDeclaration -> static Type Identifier ;', 'void': '-1', 'main': '-1',
                         '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1',
                         'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
                         'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1',
                         'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1',
                         '.': '-1', '==': '-1', },
    'VarDeclarations': {'EOF': 'VarDeclarations -> ''', 'public': 'VarDeclarations -> ''', 'class': '-1',
                        '{': 'VarDeclarations -> ''', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1',
                        '}}': '-1', '}': 'VarDeclarations -> ''', 'extends': '-1', ';': '-1',
                        '(': 'VarDeclarations -> ''', ')': '-1',
                        'return': 'VarDeclarations -> VarDeclaration VarDeclarations',
                        ',': 'VarDeclarations -> VarDeclaration VarDeclarations', 'boolean': 'VarDeclarations -> ''',
                        'int': '-1', 'if': 'VarDeclarations -> ''', 'else': 'VarDeclarations -> ''', 'while': '-1',
                        'for': '-1', '=': 'VarDeclarations -> ''', '+': '-1', 'System.out.println': '-1', '*': '-1',
                        'true': '-1', 'false': 'VarDeclarations -> ''', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                        '-': '-1', '.': '-1', '==': '-1', },
    'VarDeclaration': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1',
                       'main': '-1', '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                       ')': '-1', 'return': 'VarDeclaration -> Type Identifier ;',
                       ',': 'VarDeclaration -> Type Identifier ;', 'boolean': '-1', 'int': '-1', 'if': '-1',
                       'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                       '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                       '-': '-1', '.': '-1', '==': '-1', },
    'MethodDeclarations': {'EOF': '-1', 'public': 'MethodDeclarations -> MethodDeclaration MethodDeclarations',
                           'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1', '}}': '-1',
                           '}': 'MethodDeclarations -> ''', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1',
                           'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
                           'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1',
                           'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1',
                           '.': '-1', '==': '-1', },
    'MethodDeclaration': {'EOF': '-1',
                          'public': 'MethodDeclaration -> public static Type Identifier ( Parameters ) { VarDeclarations Statements return GenExpression ; }',
                          'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1', '}}': '-1',
                          '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1', ',': '-1',
                          'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1',
                          '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1',
                          'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Parameters': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': '-1', '}}': 'Parameters -> ''', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1',
                   'return': 'Parameters -> Type Identifier Parameter', ',': 'Parameters -> Type Identifier Parameter',
                   'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1',
                   '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1',
                   'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Parameter': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                  '()': '-1', '}}': 'Parameter -> ''', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                  ')': 'Parameter -> , Type Identifier Parameter', 'return': '-1', ',': '-1', 'boolean': '-1',
                  'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1',
                  'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1',
                  'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Type': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
             '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1',
             'return': 'Type -> boolean', ',': 'Type -> int', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
             'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1',
             'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Statements': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': 'Statements -> A', 'static': '-1', 'void': '-1',
                   'main': '-1', '()': '-1', '}}': '-1', '}': 'Statements -> A', 'extends': '-1', ';': '-1',
                   '(': 'Statements -> A', ')': '-1', 'return': '-1', ',': '-1', 'boolean': 'Statements -> A',
                   'int': '-1', 'if': 'Statements -> A', 'else': 'Statements -> A', 'while': '-1', 'for': '-1',
                   '=': 'Statements -> A', '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1',
                   'false': 'Statements -> A', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1',
                   '==': '-1', },
    'A': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': 'A -> Statement A', 'static': '-1', 'void': '-1',
          'main': '-1', '()': '-1', '}}': '-1', '}': 'A -> ''', 'extends': '-1', ';': '-1', '(': 'A -> ''', ')': '-1',
          'return': '-1', ',': '-1', 'boolean': 'A -> Statement A', 'int': '-1', 'if': 'A -> Statement A',
          'else': 'A -> Statement A', 'while': '-1', 'for': '-1', '=': 'A -> Statement A', '+': '-1',
          'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': 'A -> Statement A', '&&': '-1',
          'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Statement': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': 'Statement -> { Statements }', 'static': '-1',
                  'void': '-1', 'main': '-1', '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                  ')': '-1', 'return': '-1', ',': '-1',
                  'boolean': 'Statement -> if ( GenExpression ) Statement else Statement', 'int': '-1',
                  'if': 'Statement -> while ( GenExpression ) Statement',
                  'else': 'Statement -> for ( Identifier = Integer ; RelTerm ; Identifier + = Integer ) Statement',
                  'while': '-1', 'for': '-1', '=': 'Statement -> System.out.println ( GenExpression ) ;', '+': '-1',
                  'System.out.println': '-1', '*': '-1', 'true': '-1',
                  'false': 'Statement -> Identifier = GenExpression ;', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                  '-': '-1', '.': '-1', '==': '-1', },
    'GenExpression': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                      '()': 'GenExpression -> Factor C B E', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1',
                      '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                      'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1',
                      'System.out.println': 'GenExpression -> Factor C B E', '*': 'GenExpression -> Factor C B E',
                      'true': '-1', 'false': 'GenExpression -> Factor C B E', '&&': 'GenExpression -> Factor C B E',
                      'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'E': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1',
          '}}': 'E -> ''', '}': '-1', 'extends': '-1', ';': 'E -> ''', '(': '-1', ')': 'E -> ''', 'return': '-1',
          ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1',
          '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1',
          'integer': '-1', '-': 'E -> RelTerm1 D', '.': 'E -> RelTerm1 D', '==': '-1', },
    'Expression': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': 'Expression -> Term B', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                   ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
                   'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': 'Expression -> Term B',
                   '*': 'Expression -> Term B', 'true': '-1', 'false': 'Expression -> Term B',
                   '&&': 'Expression -> Term B', 'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1',
                   '==': '-1', },
    'B': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1',
          '}}': 'B -> ''', '}': '-1', 'extends': '-1', ';': 'B -> ''', '(': '-1', ')': 'B -> ''', 'return': '-1',
          ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': 'B -> Expression1 B',
          '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': 'B -> ''', 'false': '-1', '&&': '-1',
          'identifier': 'B -> Expression1 B', 'integer': '-1', '-': 'B -> ''', '.': 'B -> ''', '==': '-1', },
    'Term': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
             '()': 'Term -> Factor C', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1',
             'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1',
             'for': '-1', '=': '-1', '+': '-1', 'System.out.println': 'Term -> Factor C', '*': 'Term -> Factor C',
             'true': '-1', 'false': 'Term -> Factor C', '&&': 'Term -> Factor C', 'identifier': '-1', 'integer': '-1',
             '-': '-1', '.': '-1', '==': '-1', },
    'C': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1',
          '}}': 'C -> ''', '}': '-1', 'extends': '-1', ';': 'C -> ''', '(': '-1', ')': 'C -> ''', 'return': '-1',
          ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': 'C -> ''', '=': '-1',
          '+': 'C -> * Factor C', 'System.out.println': '-1', '*': '-1', 'true': 'C -> ''', 'false': '-1', '&&': '-1',
          'identifier': 'C -> ''', 'integer': '-1', '-': 'C -> ''', '.': 'C -> ''', '==': '-1', },
    'Factor': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
               '()': 'Factor -> ( Expression )', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
               ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
               'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': 'Factor -> true',
               '*': 'Factor -> false', 'true': '-1', 'false': 'Factor -> Identifier Factor2', '&&': 'Factor -> Integer',
               'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'D': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1', '()': '-1',
          '}}': 'D -> ''', '}': '-1', 'extends': '-1', ';': 'D -> ''', '(': '-1', ')': 'D -> ''', 'return': '-1',
          ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1',
          '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': 'D -> && RelTerm D', 'false': '-1', '&&': '-1',
          'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'RelTerm': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                '()': 'RelTerm -> ( Expression ) C B RelTerm1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1',
                '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
                'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': 'RelTerm -> true C B RelTerm1',
                '*': 'RelTerm -> false C B RelTerm1', 'true': '-1',
                'false': 'RelTerm -> Identifier Factor2 C B RelTerm1', '&&': 'RelTerm -> Integer C B RelTerm1',
                'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Arguments': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                  '()': 'Arguments -> ( Expression ) C B Arguments1', '}}': 'Arguments -> ''', '}': '-1',
                  'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1', ',': '-1', 'boolean': '-1',
                  'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1',
                  'System.out.println': 'Arguments -> true C B Arguments3', '*': 'Arguments -> false C B Arguments4',
                  'true': '-1', 'false': 'Arguments -> Identifier Factor2 C B Arguments2',
                  '&&': 'Arguments -> Integer C B Arguments5', 'identifier': '-1', 'integer': '-1', '-': '-1',
                  '.': '-1', '==': '-1', },
    'Argument': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                 '()': '-1', '}}': 'Argument -> ''', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                 ')': 'Argument -> , GenExpression Argument', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1',
                 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                 '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1',
                 '.': '-1', '==': '-1', },
    'Identifier': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1',
                   ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1',
                   '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1',
                   'false': 'Identifier -> identifier', '&&': '-1', 'identifier': '-1', 'integer': '-1', '-': '-1',
                   '.': '-1', '==': '-1', },
    'Integer': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1',
                ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1',
                '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1',
                '&&': 'Integer -> integer', 'identifier': '-1', 'integer': '-1', '-': '-1', '.': '-1', '==': '-1', },
    'Expression1': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                    '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1',
                    ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1',
                    'for': 'Expression1 -> + Term', '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1',
                    'true': '-1', 'false': '-1', '&&': '-1', 'identifier': 'Expression1 -> - Term', 'integer': '-1',
                    '-': '-1', '.': '-1', '==': '-1', },
    'Factor1': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                '()': 'Factor1 -> ( Arguments )', '}}': 'Factor1 -> ''', '}': '-1', 'extends': '-1',
                ';': 'Factor1 -> ''', '(': '-1', ')': 'Factor1 -> ''', 'return': '-1', ',': '-1', 'boolean': '-1',
                'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': 'Factor1 -> ''', '=': '-1',
                '+': 'Factor1 -> ''', 'System.out.println': '-1', '*': '-1', 'true': 'Factor1 -> ''', 'false': '-1',
                '&&': '-1', 'identifier': 'Factor1 -> ''', 'integer': '-1', '-': 'Factor1 -> ''', '.': 'Factor1 -> ''',
                '==': '-1', },
    'Factor2': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                '()': '-1', '}}': 'Factor2 -> ''', '}': '-1', 'extends': '-1', ';': 'Factor2 -> ''', '(': '-1',
                ')': 'Factor2 -> ''', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1',
                'while': '-1', 'for': 'Factor2 -> ''', '=': '-1', '+': 'Factor2 -> ''', 'System.out.println': '-1',
                '*': '-1', 'true': 'Factor2 -> ''', 'false': '-1', '&&': '-1', 'identifier': 'Factor2 -> ''',
                'integer': 'Factor2 -> . Identifier Factor1', '-': 'Factor2 -> ''', '.': 'Factor2 -> ''', '==': '-1', },
    'RelTerm1': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                 '()': '-1', '}}': '-1', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1', ')': '-1', 'return': '-1',
                 ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1', 'else': '-1', 'while': '-1', 'for': '-1',
                 '=': '-1', '+': '-1', 'System.out.println': '-1', '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1',
                 'identifier': '-1', 'integer': '-1', '-': 'RelTerm1 -> == Expression', '.': 'RelTerm1 -> < Expression',
                 '==': '-1', },
    'Arguments1': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': '-1', '}}': 'Arguments1 -> Argument', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                   ')': 'Arguments1 -> Argument', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                   'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                   '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                   '-': 'Arguments1 -> RelTerm1 D Argument', '.': 'Arguments1 -> RelTerm1 D Argument', '==': '-1', },
    'Arguments2': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': '-1', '}}': 'Arguments2 -> Argument', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                   ')': 'Arguments2 -> Argument', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                   'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                   '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                   '-': 'Arguments2 -> RelTerm1 D Argument', '.': 'Arguments2 -> RelTerm1 D Argument', '==': '-1', },
    'Arguments3': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': '-1', '}}': 'Arguments3 -> Argument', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                   ')': 'Arguments3 -> Argument', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                   'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                   '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                   '-': 'Arguments3 -> RelTerm1 D Argument', '.': 'Arguments3 -> RelTerm1 D Argument', '==': '-1', },
    'Arguments4': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': '-1', '}}': 'Arguments4 -> Argument', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                   ')': 'Arguments4 -> Argument', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                   'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                   '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                   '-': 'Arguments4 -> RelTerm1 D Argument', '.': 'Arguments4 -> RelTerm1 D Argument', '==': '-1', },
    'Arguments5': {'EOF': '-1', 'public': '-1', 'class': '-1', '{': '-1', 'static': '-1', 'void': '-1', 'main': '-1',
                   '()': '-1', '}}': 'Arguments5 -> Argument', '}': '-1', 'extends': '-1', ';': '-1', '(': '-1',
                   ')': 'Arguments5 -> Argument', 'return': '-1', ',': '-1', 'boolean': '-1', 'int': '-1', 'if': '-1',
                   'else': '-1', 'while': '-1', 'for': '-1', '=': '-1', '+': '-1', 'System.out.println': '-1',
                   '*': '-1', 'true': '-1', 'false': '-1', '&&': '-1', 'identifier': '-1', 'integer': '-1',
                   '-': 'Arguments5 -> RelTerm1 D Argument', '.': 'Arguments5 -> RelTerm1 D Argument', '==': '-1', }, }

# parsing chapter
stack = ['$', 'Goal']
top_stack = stack.pop()
while top_stack != '$':
    if top_stack in ter:
        token = sendNextToken()
        if top_stack == token[0]:
            top_stack = stack.pop()
            token = sendNextToken()
    elif top_stack in non_ter:
        token = sendNextToken()
        if ll1[top_stack][token[0]] != '-1':
            top_stack = stack.pop()
            rl = ll1[top_stack][token].split(' -> ')
            stack.append(rl[1])
    print(stack)
